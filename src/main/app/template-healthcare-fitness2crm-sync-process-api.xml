<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:api-platform-gw="http://www.mulesoft.org/schema/mule/api-platform-gw"
	xmlns:objectstore="http://www.mulesoft.org/schema/mule/objectstore" xmlns:schedulers="http://www.mulesoft.org/schema/mule/schedulers" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:tls="http://www.mulesoft.org/schema/mule/tls"
	xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:apikit="http://www.mulesoft.org/schema/mule/apikit" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/api-platform-gw http://www.mulesoft.org/schema/mule/api-platform-gw/current/mule-api-platform-gw.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-current.xsd
http://www.mulesoft.org/schema/mule/tls http://www.mulesoft.org/schema/mule/tls/current/mule-tls.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/apikit http://www.mulesoft.org/schema/mule/apikit/current/mule-apikit.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/schedulers http://www.mulesoft.org/schema/mule/schedulers/current/mule-schedulers.xsd
http://www.mulesoft.org/schema/mule/objectstore http://www.mulesoft.org/schema/mule/objectstore/current/mule-objectstore.xsd">
    
    <api-platform-gw:api id="${api.id}" apiName="${api.name}" version="${api.version}" flowRef="template-healthcare-fitness2crm-sync-process-api-main" doc:name="API Autodiscovery" create="true" ></api-platform-gw:api>
    
    
    <context:property-placeholder location="mule.${mule.env}.properties, common.properties" />
    
    <http:listener-config name="template-healthcare-fitness2crm-sync-process-api-httpListenerConfig" host="0.0.0.0" port="${https.port}" doc:name="HTTP Listener Configuration" protocol="HTTPS">
		<tls:context>
            <tls:key-store type="jks" path="${keystore.location}" alias="${key.alias}" keyPassword="${key.password}" password="${keystore.password}"/>
        </tls:context>
	</http:listener-config>
    
    <apikit:config name="template-healthcare-fitness2crm-sync-process-api-config" raml="healthcare-fitness2crm-sync-process-api.raml" consoleEnabled="true" doc:name="Router" consolePath="console">
        <apikit:flow-mapping resource="/patients/{id}/authorize" action="post" flow-ref="post:/patients/{id}/authorize:template-healthcare-fitness2crm-sync-process-api-config"/>
        <apikit:flow-mapping resource="/patients/{id}/authorize" action="get" flow-ref="get:/patients/{id}/authorize:template-healthcare-fitness2crm-sync-process-api-config"/>
        <apikit:flow-mapping resource="/patients/{id}/unauthorize" action="get" flow-ref="get:/patients/{id}/unauthorize:template-healthcare-fitness2crm-sync-process-api-config"/>
        <apikit:flow-mapping resource="/patients/{id}/migrateFitnessData" action="post" flow-ref="post:/patients/{id}/migrateFitnessData:template-healthcare-fitness2crm-sync-process-api-config"/>
    </apikit:config>
    <http:request-config name="HTTP_Conf_fitbit2fhir-system-api" host="${fitbit2fhir.system.api.host}" port="${fitbit2fhir.system.api.port}" basePath="${fitbit2fhir.system.api.basePath}" doc:name="HTTP Request Configuration" protocol="HTTPS">
        <tls:context>
            <tls:trust-store path="${truststore.location}" password="${truststore.password}" type="jks" insecure="true"/>
            <tls:key-store type="jceks"/>
        </tls:context>
        <http:raml-api-configuration location="healthcare-fitbit2fhir-system-api/fitbit2fhir-system-api.raml"/>
           
    </http:request-config>
    <http:request-config name="HTTP_Conf_SFDC-system-api" host="${sfdc.system.api.host}" port="${sfdc.system.api.port}" basePath="${sfdc.system.api.basePath}" doc:name="HTTP Request Configuration"  connectionIdleTimeout="300000" responseTimeout="-1">
        <http:raml-api-configuration location="healthcare-system-api/healthcare-system-api.raml"/>
    </http:request-config>

    <flow name="template-healthcare-fitness2crm-sync-process-api-main">
        <http:listener config-ref="template-healthcare-fitness2crm-sync-process-api-httpListenerConfig" path="/api/*" doc:name="HTTP"/>
        <apikit:router config-ref="template-healthcare-fitness2crm-sync-process-api-config" doc:name="APIkit Router"/>
        <exception-strategy ref="template-healthcare-fitness2crm-sync-process-api-apiKitGlobalExceptionMapping" doc:name="Reference Exception Strategy"/>
    </flow>

    <flow name="post:/patients/{id}/authorize:template-healthcare-fitness2crm-sync-process-api-config">
        <http:request config-ref="HTTP_Conf_fitbit2fhir-system-api" path="/Patient/{id}/authorize" method="GET" doc:name="GET authorize call to Fitbit">
            <http:request-builder>
                <http:uri-param paramName="id" value="#[flowVars.id]"/>
            </http:request-builder>
        </http:request>
        <dw:transform-message doc:name="Get location from the response">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
location : payload.location]]></dw:set-payload>
        </dw:transform-message>

    </flow>
    <flow name="get:/patients/{id}/authorize:template-healthcare-fitness2crm-sync-process-api-config">
        <http:request config-ref="HTTP_Conf_fitbit2fhir-system-api" path="/Patient/{id}/authorize" method="GET" doc:name="GET authorize call to Fitbit">
            <http:request-builder>
                <http:uri-param paramName="id" value="#[flowVars.id]"/>
            </http:request-builder>
        </http:request>
        <dw:transform-message doc:name="Get location from the response">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload.location]]></dw:set-payload>
        </dw:transform-message>
        <set-property propertyName="http.status" value="302" doc:name="Set HTTP status"/>
        <set-property propertyName="location" value="#[payload]" doc:name="Set location"/>
    </flow>
    <flow name="get:/patients/{id}/unauthorize:template-healthcare-fitness2crm-sync-process-api-config">
        <http:request config-ref="HTTP_Conf_fitbit2fhir-system-api" path="/Patient/{id}/unauthorize" method="GET" doc:name="GET unauthorize call to Fitbit">
            <http:request-builder>
                <http:uri-param paramName="id" value="#[flowVars.id]"/>
            </http:request-builder>
        </http:request>

    </flow>
    <flow name="post:/patients/{id}/migrateFitnessData:template-healthcare-fitness2crm-sync-process-api-config">
        <set-variable variableName="fromDate" value="ge#[message.inboundProperties.'http.query.params'.fromDate]" doc:name="Set fromDate variable"/>
        <async doc:name="Async">
            <flow-ref name="migrateFitbitFitnessDataSubFlow" doc:name="migrateFitbitFitnessDataSubFlow"/>
        </async>
        <dw:transform-message doc:name="Prepare JSON response">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	"message" : "Migration and synchronization started successfully"
}]]></dw:set-payload>
        </dw:transform-message>

    </flow>
    <flow name="get:/patients/{id}:template-healthcare-fitness2crm-sync-process-api-config">

        <http:request config-ref="HTTP_Conf_fitbit2fhir-system-api" path="/Patient/{id}" method="GET" doc:name="GET Patient authorization status">
            <http:request-builder>
                <http:uri-param paramName="id" value="#[flowVars.id]"/>
            </http:request-builder>
        </http:request>

    </flow>
    <flow name="syncFitbitFitnessDataFlow" initialState="started">
        <poll doc:name="Poll ">
            <schedulers:cron-scheduler expression="0 10 0 * * ?"/>
            <logger message="Polling changes from Fitbit .... date : #[server.dateTime.format(&quot;yyyy-MM-dd&quot;)]" level="INFO" doc:name="Log poll for changes from Fitbit"/>
        </poll>
        <http:request config-ref="HTTP_Conf_fitbit2fhir-system-api" path="/Patient" method="GET" doc:name="GET authorized Patients from Fitbit"/>
        <dw:transform-message doc:name="Get Patients from the response">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload.patients]]></dw:set-payload>
        </dw:transform-message>
        <foreach collection="#[payload]" doc:name="For Each Patient">
            <set-variable variableName="fromDate" value="eq#[server.dateTime.format(&quot;yyyy-MM-dd&quot;)]" doc:name="Set fromDate variable"/>
            <set-variable variableName="id" value="#[payload]" doc:name="Set id variable"/>
            <logger message="ObservationDate: #[flowVars.fromDate] ** PatientID: #[flowVars.id]" level="INFO" doc:name="Log fromDate and id variables"/>
            <flow-ref name="migrateFitbitFitnessDataSubFlow" doc:name="migrateFitbitFitnessDataSubFlow"/>
        </foreach>
        <logger message="Poll has finished!" level="INFO" doc:name="Log 'Poll has finished' message"/>
    </flow>
    <sub-flow name="migrateFitbitFitnessDataSubFlow">
        <flow-ref name="migrateDevicesSubFlow" doc:name="migrateDevicesSubFlow"/>
        <flow-ref name="migrateObservationsSubFlow" doc:name="migrateObservationsSubFlow"/>
    </sub-flow>
    <sub-flow name="migrateDevicesSubFlow">
        <http:request config-ref="HTTP_Conf_fitbit2fhir-system-api" path="/Patient/{id}/Device" method="GET" doc:name="GET Devices from Fitbit">
            <http:request-builder>
                <http:uri-param paramName="id" value="#[flowVars.id]"/>

            </http:request-builder>
        </http:request>
        <dw:transform-message doc:name="Get Devices from the response">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload.entry.resource when (payload.total > 0) otherwise []]]></dw:set-payload>
        </dw:transform-message>
        <foreach collection="payload" doc:name="For Each Device">
            <set-variable variableName="device" value="#[payload]" doc:name="Set Device variable"/>
            <http:request config-ref="HTTP_Conf_SFDC-system-api" path="/Device" method="GET" doc:name="GET Device from SFDC">
                <http:request-builder>
                    <http:query-param paramName="identifier" value="#[flowVars.device.id]"/>
                </http:request-builder>
            </http:request>
            <dw:transform-message doc:name="Get existing Device Id from JSON response">
                <dw:set-variable variableName="existingDeviceId"><![CDATA[%dw 1.0
%output application/java
---
payload.entry.resource[0].id when (payload.total > 0) otherwise null]]></dw:set-variable>
            </dw:transform-message>
            <choice doc:name="Does Device already exist?">
                <when expression="#[flowVars.existingDeviceId == null]">
                    <logger message="POSTing Device : #[flowVars.device]" level="INFO" doc:name="Log POST operation"/>
                    <dw:transform-message doc:name="Prepare Device for POST in FHIR JSON structure">
                        <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
flowVars.device]]></dw:set-payload>
                    </dw:transform-message>
                    <http:request config-ref="HTTP_Conf_SFDC-system-api" path="/Device" method="POST" doc:name="POST Device into SFDC"/>
                </when>
                <otherwise>
                    <logger message="PUTing Device: #[flowVars.device]" level="INFO" doc:name="Log PUT operation"/>
                    <dw:transform-message doc:name="Prepare Device for PUT in FHIR JSON structure">
                        <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
flowVars.device ++ { "id" : flowVars.existingDeviceId }]]></dw:set-payload>
                    </dw:transform-message>
                    <http:request config-ref="HTTP_Conf_SFDC-system-api" path="/Device/{id}" method="PUT" doc:name="PUT Device into SFDC">
                        <http:request-builder>
                            <http:uri-param paramName="id" value="#[flowVars.existingDeviceId]"/>
                        </http:request-builder>
                    </http:request>
                </otherwise>
            </choice>
        </foreach>
    </sub-flow>
    <sub-flow name="migrateObservationsSubFlow">
        <http:request config-ref="HTTP_Conf_fitbit2fhir-system-api" path="/Patient/{id}/Observation" method="GET" doc:name="GET Observations from Fitbit">
            <http:request-builder>
                <http:query-param paramName="date" value="#[flowVars.fromDate]"/>
                <http:uri-param paramName="id" value="#[flowVars.id]"/>
            </http:request-builder>
        </http:request>
        <dw:transform-message doc:name="Get Observations from the response">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload.entry.resource when (payload.total > 0) otherwise []]]></dw:set-payload>
        </dw:transform-message>
        <foreach collection="payload" doc:name="For Each Observation">
            <logger message="POSTing Observation: #[payload]" level="INFO" doc:name="Log POST operation"/>
            <dw:transform-message doc:name="Prepare Observation in FHIR JSON structure">
                <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
payload]]></dw:set-payload>
            </dw:transform-message>
            <http:request config-ref="HTTP_Conf_SFDC-system-api" path="/Observation" method="POST" doc:name="POST Observation to SFDC"/>
        </foreach>
    </sub-flow>

    <apikit:mapping-exception-strategy name="template-healthcare-fitness2crm-sync-process-api-apiKitGlobalExceptionMapping">
        <apikit:mapping statusCode="404">
            <apikit:exception value="org.mule.module.apikit.exception.NotFoundException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Resource not found&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
        <apikit:mapping statusCode="405">
            <apikit:exception value="org.mule.module.apikit.exception.MethodNotAllowedException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Method not allowed&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
        <apikit:mapping statusCode="415">
            <apikit:exception value="org.mule.module.apikit.exception.UnsupportedMediaTypeException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Unsupported media type&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
        <apikit:mapping statusCode="406">
            <apikit:exception value="org.mule.module.apikit.exception.NotAcceptableException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Not acceptable&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
	    <apikit:mapping statusCode="401">
            <apikit:exception value="org.mule.module.http.internal.request.ResponseValidatorException"/>

            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Unauthorized&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
        <apikit:mapping statusCode="400">
            <apikit:exception value="org.mule.module.apikit.exception.BadRequestException"/>
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Bad request&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
    </apikit:mapping-exception-strategy>
</mule>
